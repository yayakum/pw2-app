1- Ventana de chat 🟢
2- Centro de notificaciones 🟢
3- Ventana de modificación del usuario 🟢
4- Validaciones 🟢
5- Modal comentarios 🟢
6- Boton para eliminar publicaciones 🟢
7- boton para eliminar notificacion 🟢
8- boton para eliminar todas las notifiaciones 🟢
9- Agregar sección de explorar 🟢
10- agregar hora y boton de eliminar mensaje y de editar 🔴
12- agregar boton de modificar post 🟢
13- agregar modal para confirmar eliminar post 🟢
14- agregar modal para modificar el post 🟢
15- agregar boton para eliminar comentarios 🟢
16- agregar boton para editar comentarios 🟢


------------------------------------------------------

import React, { useState, useRef } from 'react';
import { Bookmark, Heart, MessageCircle, Trash2, Send, CheckCircle, MoreHorizontal, Edit, X, Upload } from 'lucide-react';

// Componente para editar publicación con carga de imágenes
const EditPostForm = ({ post, onSave, onCancel }) => {
  const [editedContent, setEditedContent] = useState(post.content);
  const [editedImage, setEditedImage] = useState(post.image);
  const [showImageOptions, setShowImageOptions] = useState(false);
  
  // Referencia para el input de archivo
  const fileInputRef = useRef(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (editedContent.trim()) {
      onSave(editedContent, editedImage);
    }
  };
  
  const handleRemoveImage = () => {
    setEditedImage(null);
    setShowImageOptions(false);
  };
  
  // Función para manejar la carga de archivos
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      // Crear URL del objeto para la vista previa
      const imageUrl = URL.createObjectURL(file);
      setEditedImage(imageUrl);
      setShowImageOptions(false);
    }
  };
  
  // Función para activar el diálogo de selección de archivos
  const triggerFileInput = () => {
    fileInputRef.current.click();
  };

  return (
    <form onSubmit={handleSubmit} className="mb-4">
      <textarea
        value={editedContent}
        onChange={(e) => setEditedContent(e.target.value)}
        className="w-full bg-gray-700 rounded-lg p-3 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 mb-2"
        rows={4}
      />
      
      {/* Sección de imagen */}
      <div className="mb-3">
        {editedImage && (
          <div className="relative mb-2">
            <img
              src={editedImage}
              alt="Post image"
              className="w-full h-auto rounded-lg object-cover"
            />
            <button
              type="button"
              onClick={handleRemoveImage}
              className="absolute top-2 right-2 bg-gray-800 bg-opacity-70 rounded-full p-1 text-white hover:bg-red-500"
            >
              <X size={16} />
            </button>
          </div>
        )}
        
        {/* Input oculto para carga de archivos */}
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept="image/*"
          className="hidden"
        />
        
        <div className="flex items-center space-x-2">
          <button
            type="button"
            onClick={triggerFileInput}
            className="px-3 py-1 text-sm text-gray-300 hover:text-white bg-gray-700 hover:bg-gray-600 rounded-md flex items-center"
          >
            <Upload size={14} className="mr-1" />
            {editedImage ? "Cambiar imagen" : "Subir imagen"}
          </button>
        </div>
      </div>
      
      <div className="flex justify-end space-x-2">
        <button
          type="button"
          onClick={onCancel}
          className="px-3 py-1 text-sm text-gray-300 hover:text-white bg-gray-700 hover:bg-gray-600 rounded-md"
        >
          Cancelar
        </button>
        <button
          type="submit"
          className="px-3 py-1 text-sm text-white bg-purple-600 hover:bg-purple-700 rounded-md"
        >
          Guardar
        </button>
      </div>
    </form>
  );
};

// Resto de los componentes permanecen igual, solo actualizo la importación del EditPostForm
const Post = ({ post, onDelete }) => {
  // Estado para manejar los comentarios
  const [comments, setComments] = useState(post.comments || []);
  
  // Estado para mostrar/ocultar input de comentarios
  const [showCommentInput, setShowCommentInput] = useState(false);
  
  // Estado para manejar likes
  const [liked, setLiked] = useState(false);
  const [likeCount, setLikeCount] = useState(post.likes);

  // Estado para el menú de opciones
  const [optionsMenuOpen, setOptionsMenuOpen] = useState(false);

  // Estado para la edición de la publicación
  const [isEditing, setIsEditing] = useState(false);
  const [postContent, setPostContent] = useState(post.content);
  const [postImage, setPostImage] = useState(post.image);

  // Usuario actual 
  const currentUser = {
    name: 'María Rodríguez',
    avatar: '/api/placeholder/40/40',
    verified: true
  };

  // Función para agregar un nuevo comentario
  const handleSubmitComment = (newComment) => {
    setComments([...comments, newComment]);
  };

  // Función para manejar likes
  const handleLike = () => {
    setLiked(!liked);
    setLikeCount(liked ? likeCount - 1 : likeCount + 1);
  };

  // Funciones para el menú de opciones
  const handleEdit = () => {
    setIsEditing(true);
    setOptionsMenuOpen(false);
  };

  const handleDelete = () => {
    if (onDelete) {
      onDelete(post.id);
    } else {
      console.log('Post eliminado:', post);
    }
    setOptionsMenuOpen(false);
  };

  // Función para guardar la edición
  const handleSaveEdit = (newContent, newImage) => {
    setPostContent(newContent);
    setPostImage(newImage);
    setIsEditing(false);
  };

  return (
    <div className="mb-6 p-4 rounded-lg bg-gray-800 bg-opacity-60 shadow-md relative">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center space-x-3">
          <img
            src={post.user.avatar}
            alt={`${post.user.name}'s avatar`}
            className="w-10 h-10 rounded-full border-2 border-purple-500"
          />
          <div>
            <div className="flex items-center">
              <h3 className="font-medium">{post.user.name}</h3>
              {post.user.verified && (
                <CheckCircle className="w-4 h-4 ml-1 text-blue-400" />
              )}
            </div>
            <p className="text-xs text-gray-400">{post.time}</p>
          </div>
        </div>
        <div className="relative">
          <button 
            className="text-gray-400 hover:text-gray-300 cursor-pointer"
            onClick={() => setOptionsMenuOpen(!optionsMenuOpen)}
          >
            <MoreHorizontal size={20} />
          </button>
          
          <OptionsMenu 
            isOpen={optionsMenuOpen} 
            onEdit={handleEdit} 
            onDelete={handleDelete}
            onClose={() => setOptionsMenuOpen(false)}
          />
        </div>
      </div>
      
      <div className="mb-4">
        {isEditing ? (
          <EditPostForm 
            post={{ content: postContent, image: postImage }} 
            onSave={handleSaveEdit} 
            onCancel={() => setIsEditing(false)} 
          />
        ) : (
          <p className="text-sm sm:text-base">{postContent}</p>
        )}
      </div>
      
      {postImage && !isEditing && (
        <div className="mb-4 rounded-lg overflow-hidden">
          <img
            src={postImage}
            alt="Post image"
            className="w-full h-auto object-cover"
          />
        </div>
      )}
      
      <div className="flex justify-between text-sm text-gray-400 mb-3">
        <span>{likeCount} likes</span>
        <span>{comments.length} comentarios</span>
      </div>
      
      <div className="flex justify-between pt-3 border-t border-gray-700">
        <button 
          onClick={handleLike}
          className={`flex items-center space-x-2 text-sm p-2 rounded-md hover:bg-gray-700 cursor-pointer ${
            liked 
              ? 'text-red-500 hover:text-red-600' 
              : 'text-gray-300 hover:text-white'
          }`}
        >
          <Heart size={18} fill={liked ? 'currentColor' : 'none'} />
          <span>Me gusta</span>
        </button>
        <button 
          onClick={() => setShowCommentInput(!showCommentInput)}
          className="flex items-center space-x-2 text-sm text-gray-300 hover:text-white p-2 rounded-md hover:bg-gray-700 cursor-pointer"
        >
          <MessageCircle size={18} />
          <span>Comentar</span>
        </button>
        <button className="flex items-center space-x-2 text-sm text-gray-300 hover:text-white p-2 rounded-md hover:bg-gray-700 cursor-pointer">
          <Bookmark size={18} />
          <span>Guardar</span>
        </button>
      </div>

      {/* Sección de Comentarios */}
      <div className="mt-4 border-t border-gray-700 pt-4">
        {/* Mostrar Comentarios */}
        {comments.length > 0 && (
          <div className="mb-4">
            {comments.map((comment, index) => (
              <Comment key={index} comment={comment} />
            ))}
          </div>
        )}
        
        {/* Entrada de Comentarios */}
        {showCommentInput && (
          <CommentInput 
            onSubmitComment={handleSubmitComment} 
            currentUser={currentUser} 
            onCancel={() => setShowCommentInput(false)}
          />
        )}
      </div>
    </div>
  );
};

// Componente de Comentario Individual
const Comment = ({ comment }) => {
  return (
    <div className="flex items-start space-x-3 mb-4">
      {/* Avatar del usuario */}
      <img 
        src={comment.user.avatar} 
        alt={`${comment.user.name}'s avatar`} 
        className="w-8 h-8 rounded-full border border-gray-600"
      />
      
      {/* Contenido del comentario */}
      <div className="bg-gray-700 rounded-lg p-3 flex-grow">
        <div className="flex items-center mb-1">
          <h4 className="font-medium text-sm mr-2">{comment.user.name}</h4>
          {comment.user.verified && (
            <CheckCircle className="w-4 h-4 text-blue-400" />
          )}
        </div>
        <p className="text-sm">{comment.content}</p>
        
        {/* Metadatos del comentario */}
        <div className="flex items-center text-xs text-gray-400 mt-2 space-x-3">
          <span>{comment.time}</span>
          <button className="hover:text-white">Responder</button>
        </div>
      </div>
    </div>
  );
};

// Componente de Entrada de Comentarios
const CommentInput = ({ onSubmitComment, currentUser, onCancel }) => {
  const [commentText, setCommentText] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (commentText.trim()) {
      onSubmitComment({
        user: currentUser,
        content: commentText,
        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        verified: currentUser.verified
      });
      setCommentText('');
      onCancel();
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex items-center space-x-3 mt-4">
      <img 
        src={currentUser.avatar} 
        alt={`${currentUser.name}'s avatar`} 
        className="w-10 h-10 rounded-full border border-gray-600"
      />
      <div className="flex-grow relative">
        <input 
          type="text"
          value={commentText}
          onChange={(e) => setCommentText(e.target.value)}
          placeholder="Escribe un comentario..."
          className="w-full bg-gray-700 rounded-full px-4 py-2 pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
        />
        <button 
          type="submit" 
          className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-purple-500"
        >
          <Send size={18} />
        </button>
      </div>
      <button 
        type="button"
        onClick={onCancel}
        className="text-sm text-gray-400 hover:text-white"
      >
        Cancelar
      </button>
    </form>
  );
};

// Componente de Menú de Opciones
const OptionsMenu = ({ onEdit, onDelete, isOpen, onClose }) => {
  if (!isOpen) return null;
  
  return (
    <div className="absolute right-4 top-12 bg-gray-800 rounded-md shadow-lg border border-gray-700 z-10">
      <div className="py-1">
        <button 
          onClick={onEdit}
          className="w-full flex items-center px-4 py-2 text-sm text-left hover:bg-gray-700"
        >
          <Edit size={16} className="mr-2" />
          <span>Editar</span>
        </button>
        <button 
          onClick={onDelete}
          className="w-full flex items-center px-4 py-2 text-sm text-left text-red-400 hover:bg-gray-700"
        >
          <Trash2 size={16} className="mr-2" />
          <span>Eliminar</span>
        </button>
      </div>
    </div>
  );
};

// Datos simulados de ejemplo
const samplePost = {
  id: '1',
  user: {
    name: 'Carlos Sánchez',
    avatar: '/api/placeholder/40/40',
    verified: true
  },
  content: '¡Qué hermoso día para programar y crear interfaces increíbles! 🚀💻 #ReactLife',
  image: '/api/placeholder/600/400',
  time: 'Hace 2 horas',
  likes: 42,
  shares: 5,
  comments: [
    {
      user: {
        name: 'Ana Martínez',
        avatar: '/api/placeholder/40/40',
        verified: true
      },
      content: '¡Increíble proyecto! Me encanta cómo has estructurado los componentes.',
      time: '1 hora',
    },
    {
      user: {
        name: 'Pedro López',
        avatar: '/api/placeholder/40/40',
        verified: false
      },
      content: '¿Puedes compartir más detalles sobre tu proceso de diseño?',
      time: '45 min',
    }
  ]
};

// Componente de demostración
const SocialMediaPostDemo = () => {
  const handleDeletePost = (postId) => {
    console.log(`Post con ID ${postId} eliminado`);
    // Aquí irían las acciones reales para eliminar el post
  };

  return <Post post={samplePost} onDelete={handleDeletePost} />;
};

export { Post, Comment, CommentInput, SocialMediaPostDemo };
export default SocialMediaPostDemo;



--------------------------------------------------------


import React, { useState } from 'react';
import { Send, UserCircle } from 'lucide-react';

// Individual Comment Component
const Comment = ({ comment }) => {
  return (
    <div className="flex items-start space-x-3 mb-4">
      {/* User Avatar */}
      <img 
        src={comment.user.avatar || '/default-avatar.png'} 
        alt={`${comment.user.name}'s avatar`} 
        className="w-8 h-8 rounded-full border border-gray-600"
      />
      
      {/* Comment Content */}
      <div className="bg-gray-700 rounded-lg p-3 flex-grow">
        <div className="flex items-center mb-1">
          <h4 className="font-medium text-sm mr-2">{comment.user.name}</h4>
          {comment.user.verified && (
            <svg className="w-4 h-4 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
            </svg>
          )}
        </div>
        <p className="text-sm">{comment.content}</p>
        
        {/* Comment metadata */}
        <div className="flex items-center text-xs text-gray-400 mt-2 space-x-3">
          <span>{comment.time}</span>
          <button className="hover:text-white">Eliminar</button>
        </div>
      </div>
    </div>
  );
};

// Comment Input Component
const CommentInput = ({ onSubmitComment, currentUser }) => {
  const [commentText, setCommentText] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (commentText.trim()) {
      onSubmitComment({
        user: currentUser,
        content: commentText,
        time: new Date().toLocaleString()
      });
      setCommentText('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex items-center space-x-3 mt-4">
      <img 
        src={currentUser.avatar || '/default-avatar.png'} 
        alt={`${currentUser.name}'s avatar`} 
        className="w-10 h-10 rounded-full border border-gray-600"
      />
      <div className="flex-grow relative">
        <input 
          type="text"
          value={commentText}
          onChange={(e) => setCommentText(e.target.value)}
          placeholder="Escribe un comentario..."
          className="w-full bg-gray-700 rounded-full px-4 py-2 pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
        />
        <button 
          type="submit" 
          className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-purple-500"
        >
          <Send size={18} />
        </button>
      </div>
    </form>
  );
};

// Updated Post Component with Comments Section
const Post = ({ post }) => {
  const [comments, setComments] = useState(post.comments || []);
  
  // Mock current user (you would replace this with actual user context)
  const currentUser = {
    name: 'Usuario Actual',
    avatar: '/default-avatar.png',
    verified: false
  };

  const handleSubmitComment = (newComment) => {
    setComments([...comments, newComment]);
  };

  return (
    <div className="mb-6 p-4 rounded-lg bg-gray-800 bg-opacity-60 shadow-md">
      {/* Existing Post Component Code */}
      {/* ... previous Post component code remains the same ... */}
      
      {/* Comments Section */}
      <div className="mt-4 border-t border-gray-700 pt-4">
        {/* Display Comments */}
        {comments.length > 0 && (
          <div className="mb-4">
            {comments.map((comment, index) => (
              <Comment key={index} comment={comment} />
            ))}
          </div>
        )}
        
        {/* Comment Input */}
        <CommentInput 
          onSubmitComment={handleSubmitComment} 
          currentUser={currentUser} 
        />
      </div>
    </div>
  );
};

export { Post, Comment, CommentInput };
export default Post;